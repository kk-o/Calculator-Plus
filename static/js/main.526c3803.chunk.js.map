{"version":3,"sources":["components/Display.js","components/Button.js","components/ButtonContainer.js","methods/evaluate.js","components/App.js","methods/calculate.js","methods/isNumber.js","index.js"],"names":["Display","react_default","a","createElement","className","this","props","value","Component","Button","handleClick","_this","clickHandler","name","orange","wide","join","trim","onClick","ButtonContainer","buttonName","components_Button","evaluate","firstNum","secondNum","operation","first","Big","second","plus","toString","minus","times","div","Error","concat","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","obj","total","next","test","result","includes","parseFloat","calculate","state","components_Display","components_ButtonContainer","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.526c3803.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/Display.css';\n\nclass Display extends Component {\n  render() {\n    return (\n      <div className=\"calculator-display\">\n        <div>{this.props.value}</div>\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default Display;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Button.css';\n\nclass Button extends Component {\n  handleClick = () => {\n    this.props.clickHandler(this.props.name);\n  };\n\n  render() {\n    const className = [\n      \"calculator-button\",\n      this.props.orange ? \"orange\" : \"\",\n      this.props.wide ? \"wide\" : \"\",\n    ];\n\n    return (\n      <div className={className.join(\" \").trim()}>\n        <button onClick={this.handleClick}>{this.props.name}</button>\n      </div>\n    );\n  }\n}\n\nButton.propTypes = {\n  name: PropTypes.string,\n  orange: PropTypes.bool,\n  wide: PropTypes.bool,\n  clickHandler: PropTypes.func,\n};\n\nexport default Button;","import Button from './Button';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/ButtonContainer.css';\n\nclass ButtonContainer extends Component {\n  handleClick = buttonName => {\n    this.props.clickHandler(buttonName);\n  };\n\n  render() {\n    return (\n      <div className=\"button-container\">\n        <div>\n          <Button name=\"AC\" clickHandler={this.handleClick} />\n          <Button name=\"+/-\" clickHandler={this.handleClick} />\n          <Button name=\"%\" clickHandler={this.handleClick} />\n          <Button name=\"รท\" clickHandler={this.handleClick} orange />\n        </div>\n        <div>\n          <Button name=\"7\" clickHandler={this.handleClick} />\n          <Button name=\"8\" clickHandler={this.handleClick} />\n          <Button name=\"9\" clickHandler={this.handleClick} />\n          <Button name=\"x\" clickHandler={this.handleClick} orange />\n        </div>\n        <div>\n          <Button name=\"4\" clickHandler={this.handleClick} />\n          <Button name=\"5\" clickHandler={this.handleClick} />\n          <Button name=\"6\" clickHandler={this.handleClick} />\n          <Button name=\"-\" clickHandler={this.handleClick} orange />\n        </div>\n        <div>\n          <Button name=\"1\" clickHandler={this.handleClick} />\n          <Button name=\"2\" clickHandler={this.handleClick} />\n          <Button name=\"3\" clickHandler={this.handleClick} />\n          <Button name=\"+\" clickHandler={this.handleClick} orange />\n        </div>\n        <div>\n          <Button name=\"0\" clickHandler={this.handleClick} wide />\n          <Button name=\".\" clickHandler={this.handleClick} />\n          <Button name=\"=\" clickHandler={this.handleClick} orange />\n        </div>\n      </div>\n    );\n  }\n}\n\nButtonContainer.propTypes = {\n  clickHandler: PropTypes.func,\n};\n\nexport default ButtonContainer;\n","import Big from 'big.js'; // allows for arbitrary-precision decimal arithmetic\n\nexport default function evaluate(firstNum, secondNum, operation) {\n  const first = Big(firstNum || '0'); // first input number\n  const second = Big(secondNum || '0'); // second input number \n\n  // handles calculator functions\n  switch (operation) {\n    case '+':\n        return first.plus(second).toString();\n    case '-':\n        return first.minus(second).toString();\n    case 'x':\n        return first.times(second).toString();\n    case 'รท':\n        return first.div(second).toString();    \n    default: \n        throw Error(`Sorry, but: ${operation} failed`);\n    }\n}","import React, { Component } from 'react'; // enables react\nimport Display from './Display'; // calculator screen\nimport ButtonContainer from './ButtonContainer'; // input buttons\nimport calculate from '../methods/calculate'; // calculator logic\nimport '../styles/App.css'; // calculator styling\n\n/** Calculator+\n * - Main app -\n * + Calculator Display\n * + Button Container\n */\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // setup initial state\n    this.state = {\n      total: null,\n      next: null,\n      operation: null,\n    };\n}\n\n  // handle button presses and adds them to the state\n  handleClick = buttonName => {\n    this.setState(calculate(this.state, buttonName));\n  };\n  \n  // Display: outputs the result of operations performed by the user \n  // ButtonContainer: receives numbers and operations from user\n  render() {\n    return (\n      <div className=\"app\">\n        <Display value={this.state.next || this.state.total || \"0\"} />\n        <ButtonContainer clickHandler={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/** Calculate -- Method\n *   + Takes in a calculator object\n *   + Returns updated calculator object\n * \n *  Calculator -- Structure\n *    + total: string    |   the running total\n *    + next: string    |   the next number to include in the total\n *    + operation: string    |   +, -, /, etc...\n * \n */\n\nimport Big from 'big.js'; // allows for arbitrary-precision decimal arithmetic\n\nimport evaluate from './evaluate'; // performs operations on the input\nimport isNumber from './isNumber'; // checks if input item is a number\n\n\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') { // if input was AC, reset the calculator  \n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  // --- handle numbers --- // \n  if (isNumber(buttonName)) { // if input button was a number, then...\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n\n    if (obj.operation) { // if there's an operation, update next\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n\n    if (obj.next) { // if there's no operation, update next && clear value\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  // --- handle operations --- // \n  if (buttonName === '%') { // if input was division, then...\n    if (obj.operation && obj.next) {\n      const result = evaluate(obj.total, obj.next, obj.operation);\n        return {\n          total: Big(result)\n                .div(Big('100'))\n                .toString(),\n              next: null,\n              operation: null,\n          };\n        }\n      if (obj.next) {\n        return {\n          next: Big(obj.next)\n            .div(Big('100'))\n            .toString(),\n        };\n      }\n      return {};\n    }\n\n    if (buttonName === \".\") { // if input was decimal, then...\n      if (obj.next) {\n        if (obj.next.includes(\".\")) { // check if input already has decimal \n          return {};\n        }\n        return { next: obj.next + \".\" };\n      }\n      return { next: \"0.\" };\n    }\n  \n    if (buttonName === \"=\") { // if input was '=', then...\n      if (obj.next && obj.operation) {\n        return {\n          total: evaluate(obj.total, obj.next, obj.operation),\n          next: null,\n          operation: null,\n        };\n      } else {\n        return {}; // if input was '=' with no operation, just do nothing\n      }\n    }\n  \n    if (buttonName === \"+/-\") { // if input was plus or minus, then... \n      if (obj.next) {\n        return { next: (-1 * parseFloat(obj.next)).toString() };\n      }\n      if (obj.total) {\n        return { total: (-1 * parseFloat(obj.total)).toString() };\n      }\n      return {};\n    }\n  \n    if (obj.operation) { // if there's already an existing operation, then... \n      return {\n        total: evaluate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: buttonName,\n      };\n    }\n    \n    // if there's no existing operation, check if there's a number input\n    if (!obj.next) { // if there's no input number yet, just save the operation \n      return { operation: buttonName };\n    }\n  \n    return { // saves the operation and shifts 'next' into 'total'\n      total: obj.next,\n      next: null,\n      operation: buttonName,\n    };\n}","export default function isNumber(number) {\n    return /[0-9]+/.test(number); // checks if input is a number\n}","// import react, reactDom and app\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n// import styles\nimport 'github-fork-ribbon-css/gh-fork-ribbon.css';\nimport './styles/index.css';\n\n// render app to root\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}